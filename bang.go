package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strconv"
	"strings"
	"text/template"

	"github.com/pkg/errors"
	"gopkg.in/yaml.v3"
)

func main() {
	if len(os.Args) != 2 {
		fmt.Println("need 1 argument: <file.go:line>")
		os.Exit(1)
	}

	bits := strings.SplitN(os.Args[1], ":", 2)
	src, err := os.Open(bits[0])
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	defer func() { _ = src.Close() }()

	start, err := strconv.Atoi(bits[1])
	if err != nil {
		fmt.Println("invalid line:", err)
		os.Exit(1)
	}

	i := 0

	var yamlData []byte
	scanner := bufio.NewScanner(src)

	for scanner.Scan() {
		i++
		if i <= start {
			continue
		}

		line := scanner.Text()
		if !strings.HasPrefix(line, "//") {
			break
		}

		if line == "//" {
			line = ""
		} else if strings.HasPrefix(line, "// ") {
			line = strings.TrimPrefix(line, "// ")
		} else if strings.HasPrefix(line, "//\t") {
			line = strings.TrimPrefix(line, "//\t")
		}

		yamlData = append(yamlData, line...)
		yamlData = append(yamlData, "\n"...)
	}

	if err := scanner.Err(); err != nil {
		fmt.Println("scan fail:", err)
		os.Exit(1)
	}

	log.Printf("yamlData:\n%s\n---", string(yamlData))

	var j job
	if err := yaml.Unmarshal(yamlData, &j); err != nil {
		fmt.Println("format fail:", err)
		os.Exit(1)
	}

	if err := j.do(); err != nil {
		fmt.Println("job fail:", err)
		os.Exit(1)
	}
}

type job struct {
	Dest     string                 `yaml:"dest"`
	Vars     map[string]interface{} `yaml:"vars"`
	Template string                 `yaml:"template"`
}

func (j job) do() error {
	tpl, err := template.New(j.Dest).Parse(j.Template)
	if err != nil {
		return err
	}

	var buf bytes.Buffer
	if err := tpl.Execute(&buf, j.Vars); err != nil {
		return err
	}

	source := append([]byte("// Code generated by Bang.go DO NOT EDIT.\n\n"), buf.Bytes()...)
	content, err := format.Source(source)
	if err != nil {
		return errors.Wrapf(err, "format fail: %s", string(source))
	}

	if err := os.WriteFile(j.Dest, content, 0644); err != nil {
		return err
	}

	return nil
}
